#!@PYTHON_EXECUTABLE@

###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENCE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################

# -*- coding: utf-8 -*-

"""
    Python sequential version of melissa_server.

    usage:
    python melissa_server.py <options>
"""

import os
import sys
import signal
import imp
import getopt
import numpy as np
import ctypes
from mpi4py import MPI

melissa_server = np.ctypeslib.load_library('libmelissa_server4py','@CMAKE_INSTALL_PREFIX@/lib/')

imp.load_source("melissa_learning", "@CMAKE_INSTALL_PREFIX@/lib/melissa_learning.py")
import melissa_learning

c_char_ptr = ctypes.POINTER(ctypes.c_char)
c_char_ptr_ptr = ctypes.POINTER(c_char_ptr)
c_double_ptr = ctypes.POINTER(ctypes.c_double)
c_void_ptr_ptr = ctypes.POINTER(ctypes.c_void_p)

# size of the training and testing batches
BATCH_SIZE = 5

# Class to transfer data between Python and C
class simulation_data(ctypes.Structure):
    _fields_ = [("simu_id", ctypes.c_int),
                ("parameters", c_double_ptr),
                ("nb_param", ctypes.c_int),
                ("time_stamp", ctypes.c_int),
                ("first_init", ctypes.c_int),
                ("end", ctypes.c_int),
                ("val", c_double_ptr),
                ("val_size", ctypes.c_int),
                ("max_val_size", ctypes.c_int)]

def main():

    # handle to a simulation_data structure that will travel between the C calls
    simu_data_ptr = ctypes.POINTER(simulation_data)

    # C prototypes
    melissa_server.melissa_server_init.argtypes = (ctypes.c_int, # argc
                                                   c_char_ptr_ptr, # argv
                                                   c_void_ptr_ptr)

    melissa_server.melissa_server_run.argtypes = (c_void_ptr_ptr,
                                                  simu_data_ptr)

    melissa_server.melissa_server_finalize.argtypes = (c_void_ptr_ptr,
                                                       simu_data_ptr)

    # get the command line
    argc = len(sys.argv)
    argv = (c_char_ptr * (argc + 1))()
    for i, arg in enumerate(sys.argv):
        enc_arg = arg.encode('utf-8')
        argv[i] = ctypes.create_string_buffer(enc_arg)

    #create a handle for the internal server structure (noc used in the Python side)
    simu_handle = ctypes.c_void_p()

    data = simulation_data()

    #init the server
    melissa_server.melissa_server_init(argc,
                                       argv,
                                       ctypes.byref(simu_handle))

    #run the server, only the first iteration if learning enabled
    melissa_server.melissa_server_run(ctypes.byref(simu_handle),
                                      ctypes.byref(data))

    ctypes.pythonapi.PyBuffer_FromMemory.restype = ctypes.py_object

    #get the data from the C structure
    buff_val = ctypes.pythonapi.PyBuffer_FromMemory(getattr(data, 'val'), 8*getattr(data, 'val_size'))
    val_array = np.frombuffer(buff_val, float)
    buff_param = ctypes.pythonapi.PyBuffer_FromMemory(getattr(data, 'parameters'), 8*getattr(data, 'nb_param'))
    param_array = np.frombuffer(buff_param, float)
    param_array = np.append(param_array, getattr(data, 'time_stamp'))


    i = 0
    j = 0
    k = 0
    model_is_init = False
    #The while loop is executed only when going learning.
    while getattr(data, 'end') != 1:
        if not model_is_init:
            learning_handle = melissa_learning.model_init_parallel(len(val_array), len(param_array))
            model_is_init = True
        melissa_server.melissa_server_run(ctypes.byref(simu_handle),
                                          ctypes.byref(data))

        #get the data from the C structure. For now, doesn't work for multiple fields
        buff_val = ctypes.pythonapi.PyBuffer_FromMemory(getattr(data, 'val'), 8*getattr(data, 'val_size'))
        val_array = np.frombuffer(buff_val, float)
        buff_param = ctypes.pythonapi.PyBuffer_FromMemory(getattr(data, 'parameters'), 8*getattr(data, 'nb_param'))
        param_array = np.frombuffer(buff_param, float)
        param_array = np.append(param_array, float(getattr(data, 'time_stamp')))

        j += 1
        if j == 10:
            #add one out of ten result to a testing batch
            melissa_learning.add_to_testing_set(param_array, val_array, learning_handle)
            k += 1
            if k == BATCH_SIZE:
                # when the batch is ready, test on it
                res = melissa_learning.test_batch(learning_handle)
                print "loss test = " + str(res)
                k = 0
            j = 0
        else:
            #add nine out of ten result to a training batch
            melissa_learning.add_to_training_set(param_array, val_array, learning_handle)
            #if val_size != getattr(data, 'val_size'):
                #print 'New val size: '+str(getattr(data, 'val_size'))+'; old val size: '+str(val_size)
                #new_np_array = np.ctypeslib.as_array(getattr(data, 'val'), shape=(getattr(data, 'val_size'),))
                #val_size = getattr(data, 'val_size')
            i += 1
            if i == BATCH_SIZE:
                # when the batch is ready, train on it
                res = melissa_learning.train_batch(learning_handle)
                print "loss train = " + str(res)
                i = 0

    print "end server"

    #clear the remaining train and test samples
    if i != 0:
        res = melissa_learning.train_batch(learning_handle)
        print "loss train = " + str(res)
        i = 0

    if k == BATCH_SIZE:
        res = melissa_learning.test_batch(learning_handle)
        print "loss test = " + str(res)
        k = 0

    # write the NN
    if model_is_init:
        melissa_learning.save_model_parallel('.', 'model_insitu.h5')

    melissa_server.melissa_server_finalize(ctypes.byref(simu_handle),
                                           ctypes.byref(data))


if __name__ == '__main__':
    main()

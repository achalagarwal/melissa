 
#!@PYTHON_EXECUTABLE@

###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENCE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################

# -*- coding: utf-8 -*-

"""
    Python sequential version of melissa_server.

    usage:
    python melissa_server.py <options>
"""

import os
import sys
import signal
import imp
import getopt
import numpy as np
import ctypes

melissa_server = np.ctypeslib.load_library('libmelissa_server4py','@CMAKE_INSTALL_PREFIX@/lib/')

c_char_ptr = ctypes.POINTER(ctypes.c_char)
c_char_ptr_ptr = ctypes.POINTER(c_char_ptr)
c_double_ptr = ctypes.POINTER(ctypes.c_double)
c_void_ptr_ptr = ctypes.POINTER(ctypes.c_void_p)

class simulation_data(ctypes.Structure):
    _fields_ = [("simu_id", ctypes.c_int),
                ("time_stamp", ctypes.c_int),
                ("first_init", ctypes.c_int),
                ("end", ctypes.c_int),
                ("val", c_double_ptr),
                ("val_size", ctypes.c_int)]

def main():

    simu_data_ptr = ctypes.POINTER(simulation_data)

    melissa_server.melissa_server_init.argtypes = (ctypes.c_int, # argc
                                                   c_char_ptr_ptr, # argv
                                                   c_void_ptr_ptr)

    melissa_server.melissa_server_run.argtypes = (c_void_ptr_ptr,
                                                  simu_data_ptr)

    melissa_server.melissa_server_finalize.argtypes = (c_void_ptr_ptr,
                                                       simu_data_ptr)

    argc = len(sys.argv)
    argv = (c_char_ptr * (argc + 1))()
    for i, arg in enumerate(sys.argv):
        enc_arg = arg.encode('utf-8')
        argv[i] = ctypes.create_string_buffer(enc_arg)

    handle = ctypes.c_void_p()
    data = simulation_data()

    melissa_server.melissa_server_init(argc,
                                       argv,
                                       ctypes.byref(handle))

    old_val_size = getattr(data, 'val_size')
    while getattr(data, 'end') != 1:
        melissa_server.melissa_server_run(ctypes.byref(handle),
                                          ctypes.byref(data))
        if old_val_size != getattr(data, 'val_size'):
            print 'New val size: '+str(getattr(data, 'val_size'))+'; old val size: '+str(old_val_size)
            new_np_array = np.ctypeslib.as_array(getattr(data, 'val'), shape=(getattr(data, 'val_size'),))
            old_val_size = getattr(data, 'val_size')

    melissa_server.melissa_server_finalize(ctypes.byref(handle),
                                           ctypes.byref(data))

if __name__ == '__main__':
    main()

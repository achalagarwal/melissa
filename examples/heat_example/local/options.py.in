###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENCE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################


"""
    User defined options module
"""
import os
import time
import numpy as np
import subprocess
import getpass
import imp
#from matplotlib import pyplot as plt
#from matplotlib import cm
from string import Template
from shutil import copyfile


USERNAME = getpass.getuser()
BUILD_WITH_MPI = '@BUILD_WITH_MPI@'.upper()
EXECUTABLE='heatc'
NODES_SERVER = 3
NODES_GROUP = 2
WALLTIME_SERVER = 600
WALLTIME_SIMU = 300

def launch_server(server):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])
    print 'mpirun ' + ' -n '+str(NODES_SERVER) + ' ' + server.path + '/melissa_server ' + server.cmd_opt + ' &'
    server.job_id = subprocess.Popen(('mpirun ' +
                                      ' -n '+str(NODES_SERVER) +
                                      ' ' + server.path +
                                      '/melissa_server ' +
                                      server.cmd_opt +
                                      ' &').split()).pid
    os.chdir(STUDY_OPTIONS['working_directory'])

def launch_simu(simulation):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.rank))):
        os.mkdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.rank))
    os.chdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.rank))
    copyfile(STUDY_OPTIONS['working_directory']+'/server_name.txt' , './server_name.txt')
    if MELISSA_STATS['sobol_indices']:
        command = 'mpirun '
        for i in range(STUDY_OPTIONS['nb_parameters'] + 2):
            command += ' '.join(('-n',
                                 str(NODES_GROUP),
                                 '@EXAMPLES_DIR@/heat_example/local/bin/'+EXECUTABLE,
                                 str(simulation.simu_id[i]), str(simulation.coupling),
                                 ' '.join(str(j) for j in simulation.param_set[i]),
                                 ': '))
        if BUILD_WITH_FLOWVR == 'ON' and STUDY_OPTIONS['coupling'] == 'MELISSA_COUPLING_FLOWVR':
            args = []
            for i in range(STUDY_OPTIONS['nb_parameters'] + 2):
                args.append(str(simulation.simu_id[i])+" "+ str(simulation.coupling)+" "+' '.join(str(j) for j in simulation.param_set[i]))
            content = ""
            file=open("@EXAMPLES_DIR@/heat_example/scripts/flowvr_group.py", "r")
            content = Template(file.read()).substitute(args=str(args),
                               group_id=str(simulation.rank),
                               np_simu=str(int(NODES_GROUP)),
                               nb_param=str(STUDY_OPTIONS['nb_parameters']),
                               executable='@EXAMPLES_DIR@/heat_example/local/bin/'+EXECUTABLE)
            file.close()
            file=open("create_group"+str(group_id)+".py", "w")
            file.write(content)
            file.close()
            os.system('python create_group'+str(simulation.rank)+'.py')
            simulation.job_id = subprocess.Popen('flowvr group'+str(simulation.rank), shell=True).pid
        else:
            print command[:-2]
            simulation.job_id = subprocess.Popen(command[:-2].split()).pid
    else:
        if BUILD_WITH_MPI == 'ON':
            command = ' '.join(('mpirun',
                                 '-n',
                                 str(NODES_GROUP),
                                 '@EXAMPLES_DIR@/heat_example/local/bin/'+EXECUTABLE,
                                 str(simulation.simu_id),
                                 ' '.join(str(i) for i in simulation.param_set)))
        else:
            command = ' '.join(('@EXAMPLES_DIR@/heat_example/local/bin/'+EXECUTABLE,
                                str(0),
                                str(simulation.rank),
                                ' '.join(str(i) for i in simulation.param_set)))
        print command
        simulation.job_id = subprocess.Popen(command.split()).pid
    os.chdir(STUDY_OPTIONS['working_directory'])

def check_job(job):
    state = 0
    try:
        subprocess.check_output(["ps",str(job.job_id)])
        state = 1
    except:
        state = 2
    job.job_status = state

def check_load():
    try:
        subprocess.check_output(["pidof",EXECUTABLE])
        return False
    except:
        return True

def kill_job(job):
    os.system('kill '+str(job.job_id))

def draw_param_set():
    param_set = np.zeros(STUDY_OPTIONS['nb_parameters'])
    for i in range(STUDY_OPTIONS['nb_parameters']):
        param_set[i] = np.random.uniform(0, 1)
    return param_set

STUDY_OPTIONS = {}
STUDY_OPTIONS['user_name'] = USERNAME
STUDY_OPTIONS['working_directory'] = '@EXAMPLES_DIR@/heat_example/local/STATS'
STUDY_OPTIONS['nb_parameters'] = 5                 # number of varying parameters of the study
STUDY_OPTIONS['sampling_size'] = 6                 # initial number of parameter sets
STUDY_OPTIONS['nb_time_steps'] = 100               # number of timesteps, from Melissa point of view
STUDY_OPTIONS['threshold_values'] = 0.7
STUDY_OPTIONS['quantile_values'] = [0.05,0.25,0.5,0.75,0.95]
STUDY_OPTIONS['field_names'] = ["heat1"]           # list of field names
STUDY_OPTIONS['simulation_timeout'] = 40           # simulations are restarted if no life sign for 40 seconds
STUDY_OPTIONS['checkpoint_interval'] = 10          # server checkpoints every 30 seconds
STUDY_OPTIONS['coupling'] = "MELISSA_COUPLING_MPI" # option for Sobol' simulation groups coupling

MELISSA_STATS = {}
MELISSA_STATS['mean'] = True
MELISSA_STATS['variance'] = True
MELISSA_STATS['skewness'] = True
MELISSA_STATS['kurtosis'] = True
MELISSA_STATS['min'] = True
MELISSA_STATS['max'] = True
MELISSA_STATS['threshold_exceedance'] = False
MELISSA_STATS['quantiles'] = False
MELISSA_STATS['sobol_indices'] = False

USER_FUNCTIONS = {}
USER_FUNCTIONS['create_study'] = None
USER_FUNCTIONS['draw_parameter_set'] = draw_param_set
USER_FUNCTIONS['create_group'] = None
#if MELISSA_STATS['sobol_indices']:
#    USER_FUNCTIONS['launch_group'] = launch_group
#else:
USER_FUNCTIONS['launch_group'] = launch_simu
USER_FUNCTIONS['launch_server'] = launch_server
USER_FUNCTIONS['check_server_job'] = check_job
USER_FUNCTIONS['check_group_job'] = check_job
USER_FUNCTIONS['restart_server'] = launch_server
USER_FUNCTIONS['restart_group'] = None
USER_FUNCTIONS['check_scheduler_load'] = check_load
USER_FUNCTIONS['cancel_job'] = kill_job
USER_FUNCTIONS['postprocessing'] = None
USER_FUNCTIONS['finalize'] = None

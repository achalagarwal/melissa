###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENCE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################


"""
    user defined options
"""

import os
import numpy as np
import time
import sys
import re
import subprocess


NODES_SERVER = 1
CPUS_PER_NODE_SERVER = 20
NODES_SIMU = 1
PROC_PER_NODE = 20
QUEUE_SERVER = 'r4'
QUEUE_SIMU = 'r4'
TOT_CPUS_SERVER = NODES_SERVER * CPUS_PER_NODE_SERVER
# PARALLEL RUNNER PBS CONFIGURATION
WALLTIME_SERVER = "0:20:00"
WALLTIME_SIMU = "48:00:00"

RANGE_MIN_PARAM = np.zeros(3, float)
RANGE_MAX_PARAM = np.ones(3, float)
RANGE_MIN_PARAM[0] = 956.54
RANGE_MAX_PARAM[0] = 1064.7
RANGE_MIN_PARAM[1] = 0.00109
RANGE_MAX_PARAM[1] = 0.00245


BATCH_SCHEDULER = "local"
XML_FILE_NAME = "melissa.xml"
SATURNE_PATH = "/home/r4/flageul/melissa-master-2018_05_04/saturne/build/bin"
"""
    User defined scripts for Razor cluster
"""

def create_coupling_parameters (n_procs_weight,
                                n_procs_min,
                                n_procs_max):
    print("a1")
    content=""
    fichier=open("coupling_parameters.py", "w")
    content += "# -*- coding: utf-8 -*-                                                          \n"
    content += "                                                                                 \n"
    content += "#=============================================================================== \n"
    content += "# User variable settings to specify a coupling computation environnement.        \n"
    content += "                                                                                 \n"
    content += "# A coupling case is defined by a dictionnary, containing the following:         \n"
    content += "                                                                                 \n"
    content += "# Solver type ('Code_Saturne', 'SYRTHES', 'NEPTUNE_CFD' or 'Code_Aster')         \n"
    content += "# Domain directory name                                                          \n"
    content += "# Run parameter setting file                                                     \n"
    content += "# Number of processors (or None for automatic setting)                           \n"
    content += "# Optional command line parameters. If not useful = None                         \n"
    content += "#=============================================================================== \n"
    content += "                                                                                 \n"
    content += "# Define coupled domains                                                         \n"
    content += "                                                                                 \n"
    content += "domains = [                                                                      \n"
    content += "                                                                                 \n"
    content += "    {'solver': 'Code_Saturne',                                                   \n"
    content += "     'domain': 'rank"+str(0)+"',                                                 \n"
    content += "     'script': 'runcase',                                                        \n"
    content += "     'n_procs_weight': "+str(n_procs_weight)+",                                  \n"
    content += "     'n_procs_min': "+str(n_procs_min)+",                                        \n"
    content += "     'n_procs_max': "+str(n_procs_max)+"}                                        \n"
    content += "                                                                                 \n"
    for j in range(STUDY_OPTIONS['nb_parameters']+1):
        content += "    ,                                                                            \n"
        content += "    {'solver': 'Code_Saturne',                                                   \n"
        content += "     'domain': 'rank"+str(j+1)+"',                                               \n"
        content += "     'script': 'runcase',                                                        \n"
        content += "     'n_procs_weight': "+str(n_procs_weight)+",                                  \n"
        content += "     'n_procs_min': "+str(n_procs_min)+",                                        \n"
        content += "     'n_procs_max': "+str(n_procs_max)+"}                                        \n"
        content += "                                                                                 \n"
    content += "    ]                                                                            \n"
    content += "                                                                                 \n"
    fichier.write(content)
    fichier.close()
    os.system("chmod 744 coupling_parameters.py")

def create_run_coupling (j):
    print("a2")
    content=""
    fichier=open("run_cas_couple"+str(j)+".sh", "w")
    content += "#!/bin/bash                                                                           \n"
    #content += "#PBS -S /bin/bash                                               \n"
    content += "#PBS -N MelissaServer                                           \n"
    content += "#PBS -l select="+str(NODES_SERVER)+":ncpus="+str(PROC_PER_NODE)+":mpiprocs="+str(PROC_PER_NODE)+" \n"
    content += "#PBS -q "+str(QUEUE_SERVER)+"                                   \n"
    content += "#PBS -l walltime="+str(WALLTIME_SIMU)+"                                                     \n"
    content += "#PBS -o coupling.log                                                            \n"
    content += "#PBS -e coupling.err                                                            \n"
    content += "source ~/.bashrc                                                                      \n"
    content += "GROUP=$(basename `pwd` | cut -dp -f2)                                                 \n"
    content += "cd "+STUDY_OPTIONS['working_directory']+"/group"+str(j)+"                               \n"
    content += "module purge                                                     \n"
    content += "module load use.own                                              \n"
    content += "module load code-saturne/5_0+melissa                             \n"
    content += "export OMP_NUM_THREADS=1                                                              \n"
    content += "export PATH="+SATURNE_PATH+"/:$PATH                                                   \n"
    content += "date +\"%d/%m/%y %T\"                                                                 \n"
    content += "\code_saturne run --coupling coupling_parameters.py                                   \n"
    content += "date +\"%d/%m/%y %T\"                                                                 \n"
    content += "exit $?                                                                               \n"
    fichier.write(content)
    fichier.close()
    os.system("chmod 744 run_cas_couple"+str(j)+".sh")

def create_runcase_sobol ():
    print("a3")
    # script to launch simulations
    content=""
    fichier=open("run_saturne.sh", "w")
    
    content += "#!/bin/bash                                 \n"
    content += "module purge                                                     \n"
    content += "module load use.own                                              \n"
    content += "module load code-saturne/5_0+melissa                             \n"
    content += "date +\"%d/%m/%y %T\"                       \n"
    content += "export OMP_NUM_THREADS=1                    \n"
    content += "# Ensure the correct command is found:      \n"
    content += "export PATH="+SATURNE_PATH+"/:$PATH         \n"
    content += "# copy server name:                         \n"
    content += "# Run command:                              \n"
    content += "\code_saturne run --param "+XML_FILE_NAME+" \n"
    content += "date +\"%d/%m/%y %T\"                       \n"
    content += "exit $?                                     \n"
    fichier.write(content)
    fichier.close()
    os.system("chmod 744 run_saturne.sh")

def create_runcase ():
    print("a4")
    content=""
    fichier=open("runcase", "w")
    content += "#!/bin/bash                                 \n"
    content += "module purge                                                     \n"
    content += "module load use.own                                              \n"
    content += "module load code-saturne/5_0+melissa                             \n"
    content += "#PBS -l nodes="+str(NODES_SIMU)+"              \n"
    content += "#PBS -o saturne.%j.log                   \n"
    content += "#PBS -e saturne.%j.err                   \n"
    content += "source ~/.bashrc                            \n"
    content += "export OMP_NUM_THREADS=1                    \n"
    content += "export PATH="+SATURNE_PATH+"/:$PATH         \n"
    content += "date +\"%d/%m/%y %T\"                       \n"
    content += "\code_saturne run --param "+XML_FILE_NAME+" \n"
    content += "date +\"%d/%m/%y %T\"                       \n"
    content += "exit $?                                     \n"
    fichier.write(content)
    fichier.close()
    os.system("chmod 744 runcase")

def create_study():
    print("a5")
    if not os.path.isdir(STUDY_OPTIONS['working_directory']+"/"):
        os.mkdir(STUDY_OPTIONS['working_directory']+"/STATS")
    os.chdir(STUDY_OPTIONS['working_directory']+"/STATS")
    if MELISSA_STATS['sobol_indices']:
		for j in range(0, 15):
			create_run_coupling (j)
def create_run_server(server):
    print("a6")
    # signal handler definition
    signal_handler="handler() {                            \n"
    signal_handler+="echo \"### CLEAN-UP TIME !!!\"        \n"
    signal_handler+="STOP=1                                \n"
    signal_handler+="sleep 1                               \n"
    signal_handler+="killall -USR1 melissa_server          \n"
    signal_handler+="wait %1                               \n"
    signal_handler+="}                                     \n"
    content = ""
    file=open("run_server.sh", "w")
    content += "#!/bin/bash                                \n"
    content += "#PBS -S /bin/bash                                               \n"
    content += "#PBS -N MelissaServer                                           \n"
    content += "#PBS -l select="+str(NODES_SERVER)+":ncpus="+str(CPUS_PER_NODE_SERVER)+":mpiprocs="+str(CPUS_PER_NODE_SERVER)+" \n"
    content += "#PBS -q "+str(QUEUE_SERVER)+"                                   \n"
    content += "#PBS -l walltime="+str(WALLTIME_SERVER)+"                                                     \n"
    content += "#PBS -l place=scatter:excl                                      \n"
    content += "#PBS -o melissa.server.${PBS_JOBID}.log                         \n"
    content += "#PBS -e melissa.server.${PBS_JOBID}.err                         \n"
    content += "module purge                                                    \n"
    content += "module load use.own                                             \n"
    content += "module load melissa/0.3                                         \n"
    content += "echo Working directory of job ${PBS_JOBID} is ${PBS_O_WORKDIR}  \n"
    content += "cd ${PBS_O_WORKDIR}                                             \n"
    content += signal_handler
    content += "date +\"%d/%m/%y %T\"                                              \n"
    content += "STOP=0                                                             \n"
    content += "# run Melissa                                                      \n"
    content += "echo  \"### Launch Melissa\"                                       \n"
    content += "mkdir STATS/stats${PBS_JOBID}.resu                                    \n"
    content += "cd STATS/stats${PBS_JOBID}.resu                                       \n"
    content += "trap handler USR2                                                  \n"
    content += "mpirun -n "+str(TOT_CPUS_SERVER)+" "+server.path+"/melissa_server "+server.cmd_opt+" & \n"
    content += "wait %1                                                            \n"
    content += "date +\"%d/%m/%y %T\"                                              \n"
    content += "cd ..                                                              \n"
    file.write(content)
    file.close()
    os.system("chmod 744 run_server.sh")

def launch_server(server):
    print("a7")
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])
    create_run_server(server)
    proc = subprocess.Popen('qsub -l select='+str(NODES_SERVER)+':ncpus='+str(CPUS_PER_NODE_SERVER)+':mpiprocs='+str(CPUS_PER_NODE_SERVER)+' -l place=scatter:excl -q '+str(QUEUE_SERVER)+' ./run_server.sh',
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
                                  shell=True,
                                  universal_newlines=True)
    # get the job ID
    (out, err) = proc.communicate()
    server.job_id = out.split()[-1]
    os.chdir(STUDY_OPTIONS['working_directory'])


def create_restart_server(server):
    print("a8")
    # signal handler definition
    signal_handler="handler() {                     \n"
    signal_handler+="echo \"### CLEAN-UP TIME !!!\" \n"
    signal_handler+="STOP=1                         \n"
    signal_handler+="sleep 1                        \n"
    signal_handler+="killall -USR1 melissa_server   \n"
    signal_handler+="wait %1                        \n"
    signal_handler+="}                              \n"
    content=""
    file=open("run_server.sh", "w")
    content += "#!/bin/bash                                \n"
    content += "#PBS -S /bin/bash                                               \n"
    content += "#PBS -N MelissaServer                                           \n"
    content += "#PBS -l select="+str(NODES_SERVER)+":ncpus="+str(CPUS_PER_NODE_SERVER)+":mpiprocs="+str(CPUS_PER_NODE_SERVER)+" \n"
    content += "#PBS -q "+str(QUEUE_SERVER)+"                                   \n"
    content += "#PBS -l walltime="+str(WALLTIME_SERVER)+"                                                     \n"
    content += "#PBS -l place=scatter:excl                                      \n"
    content += "#PBS -o melissa.server.${PBS_JOBID}.log                         \n"
    content += "#PBS -e melissa.server.${PBS_JOBID}.err                         \n"
    content += "module purge                                                    \n"
    content += "module load use.own                                             \n"
    content += "module load melissa/0.3                                         \n"
    content += "echo Working directory of job ${PBS_JOBID} is ${PBS_O_WORKDIR}  \n"
    content += "cd ${PBS_O_WORKDIR}                                             \n"
    content += signal_handler
    content += "date +\"%d/%m/%y %T\"                                              \n"
    content += "STOP=0                                                             \n"
    content += "# run Melissa                                                      \n"
    content += "echo  \"### Launch Melissa\"                                       \n"
    content += "cd STATS/stats"+str(server.first_job_id)+".resu                                       \n"
    content += "trap handler USR2                                                  \n"
    content += "mpirun -n "+str(TOT_CPUS_SERVER)+" "+server.path+"/melissa_server "+server.cmd_opt+"/STATS/stats"+str(server.first_job_id)+".resu & \n"
    content += "wait %1                                                            \n"
    content += "date +\"%d/%m/%y %T\"                                              \n"
    content += "cd ..                                                              \n"
    file.write(content)
    file.close()
    os.system("chmod 744 run_server.sh")


def restart_server(server):
    print("a9")
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])
    create_restart_server(server)
    proc = subprocess.Popen('qsub -l select='+str(NODES_SERVER)+':ncpus='+str(CPUS_PER_NODE_SERVER)+':mpiprocs='+str(CPUS_PER_NODE_SERVER)+' -l place=scatter:excl -q '+str(QUEUE_SERVER)+' ./run_server.sh',
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
                                  shell=True,
                                  universal_newlines=True)
    # get the job ID
    (out, err) = proc.communicate()
    server.job_id = out.split()[-1]
    os.chdir(STUDY_OPTIONS['working_directory'])


def create_simu(group):
    print("a10")
    workdir = STUDY_OPTIONS['working_directory']
    os.chdir(workdir)
    if (not os.path.isdir(STUDY_OPTIONS['working_directory']+"/group"+str(group.rank))):
        create_case_str = SATURNE_PATH + "/code_saturne create --noref -s group" + \
                str(group.rank) + " -c rank0"
        if MELISSA_STATS['sobol_indices']:
            for j in range(STUDY_OPTIONS['nb_parameters'] + 1):
                create_case_str += " -c rank" + str(j+1)
#        create_case_str
        os.system(create_case_str)

    if MELISSA_STATS['sobol_indices']:
        # Only works for Sobol
        for simu in range(len(group.param_set)):
            casedir = workdir+"/group"+str(group.rank)+"/rank"+str(simu)
            os.chdir(casedir+"/SCRIPTS")
            create_runcase()
            #os.system("cp "+workdir+"/try1/SCRIPTS/run_saturne.sh "+casedir+"/SCRIPTS/runcase")
            # modif xml file
            os.chdir(casedir+"/DATA")
            fichier=open(workdir+"/try1/DATA/"+XML_FILE_NAME, "r")
            content = ""
            for line in fichier:
                if ("melissa" in line):
                    content += re.sub('options=".*"','options="'+str(group.simu_id[simu])+'"',line)
                elif("<formula>if(scalar1&lt;0.5){density" in line):
                    content += "<formula>if(scalar1&lt;0.5){density=956.54+scalar1*("+str(group.param_set[simu][0])+"-956.54);}else{density="+str(group.param_set[simu][0])+"+scalar1*(1064.7-"+str(group.param_set[simu][0])+");}</formula>"
                elif("formula>if (scalar1 &lt;0.5){molecular_viscosity") in line:
                    content += "<formula>if (scalar1 &lt;0.5){molecular_viscosity = 0.00245*"+str(group.param_set[simu][1])+"/((1-scalar1)*"+str(group.param_set[simu][1])+"+scalar1*0.00245);}else{molecular_viscosity = 0.00109*"+str(group.param_set[simu][1])+"/((1-scalar1)*0.00109+scalar1*"+str(group.param_set[simu][1])+");}</formula>"
                elif("<velocity>1e-10</velocity>") in line:
                    content += "<velocity>"+str(group.param_set[simu][2])+"</velocity>"
                else:
                    content += line       
            fichier.close()
            fichier = open(XML_FILE_NAME, 'w')
            fichier.write(content)
            fichier.close()
            os.chdir(casedir+"/SRC")
            #modif fortran routine
            fichier = open(workdir+'/try1/SRC/cs_user_initialization.f90', 'r')
            content = ""
            for line in fichier:
                content += line
            fichier.close()
            fichier = open('cs_user_initialization.f90', 'w')
            fichier.write(content)
            fichier.close()
            fichier = open(workdir+'/try1/SRC/cs_user_parameters.f90', 'r')
            content = ""
            for line in fichier:
                content += line
            fichier.close()
            fichier = open('cs_user_parameters.f90', 'w')
            fichier.write(content)
            fichier.close()
    else:

        casedir = workdir+"/group"+str(group.simu_id)+"/rank0"
        os.chdir(casedir+"/SCRIPTS")
        create_runcase()
        # os.system("cp "+workdir+"/try1/SCRIPTS/run_saturne.sh "+casedir+"/SCRIPTS/runcase")
        # modif xml file
        os.chdir(casedir+"/DATA")
        fichier=open(workdir+"/try1/DATA/"+XML_FILE_NAME, "r")
        content = ""
        for line in fichier:
            if ("melissa" in line):
                content += re.sub('options=".*"','options="'+str(group.simu_id[simu])+'"',line)
            elif("<formula>if(scalar1&lt;0.5){density" in line):
                content += "<formula>if(scalar1&lt;0.5){density=956.54+scalar1*("+str(group.param_set[simu][0])+"-956.54);}else{density="+str(group.param_set[simu][0])+"+scalar1*(1064.7-"+str(group.param_set[simu][0])+");}</formula>"
            elif("formula>if (scalar1 &lt;0.5){molecular_viscosity") in line:
                content += "<formula>if (scalar1 &lt;0.5){molecular_viscosity = 0.00245*"+str(group.param_set[simu][1])+"/((1-scalar1)*"+str(group.param_set[simu][1])+"+scalar1*0.00245);}else{molecular_viscosity = 0.00109*"+str(group.param_set[simu][1])+"/((1-scalar1)*0.00109+scalar1*"+str(group.param_set[simu][1])+");}</formula>"
            elif("<velocity>1e-10</velocity>") in line:
                content += "<velocity>"+str(group.param_set[simu][2])+"</velocity>"
            else:
                content += line
        fichier.close()
        fichier = open(XML_FILE_NAME, 'w')
        fichier.write(content)
        fichier.close()
        os.chdir(casedir+"/SRC")
        #modif fortran routine
        fichier = open(workdir+'/case1/SRC/cs_user_initialization.f90', 'r')
        content = ""
        for line in fichier:
            content += line
        fichier.close()
        fichier = open('cs_user_initialization.f90', 'w')
        fichier.write(content)
        fichier.close()
        fichier = open(workdir+'/case1/SRC/cs_user_parameters.f90', 'r')
        content = ""
        for line in fichier:
            content += line
        fichier.close()
        fichier = open('cs_user_parameters.f90', 'w')
        fichier.write(content)
        fichier.close()
    os.chdir(workdir)
    return 0

def launch_simu(simu):
    print("a11")
    os.chdir(STUDY_OPTIONS['working_directory']+"/group"+str(simu.rank))
    os.system("cp ../server_name.txt ./rank0/DATA")
    if MELISSA_STATS['sobol_indices']:
        print("1a")
        for i in range(STUDY_OPTIONS['nb_parameters'] + 1):
            os.system("cp ../server_name.txt ./rank"+str(i+1)+"/DATA")
        create_coupling_parameters("None",
                                   "None",
                                   "None")
        command = 'qsub -l select='+str(NODES_SIMU)+':ncpus='+str(PROC_PER_NODE)+':mpiprocs='+str(PROC_PER_NODE)+' -l place=scatter:excl -q '+str(QUEUE_SIMU)+' -N Saturnes'+str(simu.rank)+' ../STATS/run_cas_couple'+str(simu.rank)+'.sh'
    else:
        print("1")
        os.chdir("./rank0/SCRIPTS")
        command = 'qsub -l select='+str(NODES_SIMU)+':ncpus='+str(PROC_PER_NODE)+':mpiprocs='+str(PROC_PER_NODE)+' -l place=scatter:excl -q '+str(QUEUE_SIMU)+' -N Saturne'+str(simu.rank)+' ./runcase'
    proc = subprocess.Popen(command,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)    
    print(command)
    (out, err) = proc.communicate()
    simu.job_id = out.split()[-1]

def check_job(job):
    print("a12")
    state = 0
    proc = subprocess.Popen("qstat "+str(job.job_id)+" | tail -n1 | awk '{print $5}'",
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)
    (out, err) = proc.communicate()
    if (not "Q" in out):
        state = 1
        proc = subprocess.Popen("qstat "+str(job.job_id)+" | tail -n1 | awk '{print $5}'",
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                shell=True,
                                universal_newlines=True)
        (out, err) = proc.communicate()
        if (not "R" in out):
            state = 2
    job.job_status = state

def kill_job(job):
    print("a13")
    print 'killing job ...'
    os.system("qdel "+str(job.job_id))

def check_load():
    print("a14")
    proc = subprocess.Popen("qstat -u "+STUDY_OPTIONS['user_name']+" | wc -l",
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)
    (out, err) = proc.communicate()
    running_jobs = int(out)
    return running_jobs < 31                       # +1 for the server and +5 for the header in qstat


def draw_param_set():
    print("a15")
    param_set = np.zeros(STUDY_OPTIONS['nb_parameters'])
    for i in range(STUDY_OPTIONS['nb_parameters']):
        if (i==2):
            param_set[i]=np.random.gamma(0.3, 0.2)
        else:
            param_set[i] = np.random.uniform(RANGE_MIN_PARAM[i],
                                         RANGE_MAX_PARAM[i])
    return param_set

STUDY_OPTIONS = {}
STUDY_OPTIONS['user_name'] = "student6"
STUDY_OPTIONS['working_directory'] = "/home/r4/student6/mix"
STUDY_OPTIONS['nb_parameters'] = 3                      # number of varying parameters of the study
STUDY_OPTIONS['sampling_size'] = 15                     # initial number of parameter sets
STUDY_OPTIONS['nb_time_steps'] = 500                   # number of timesteps, from Melissa point of view
STUDY_OPTIONS['threshold_value'] = 0.7
STUDY_OPTIONS['field_names'] = ["scalar1"]              # list of field names
STUDY_OPTIONS['simulation_timeout'] = 400000             # simulations are restarted if no life sign for 400'000 seconds (int)
STUDY_OPTIONS['checkpoint_interval'] = 100              # server checkpoints every 300 seconds (double)
STUDY_OPTIONS['coupling'] = "MELISSA_COUPLING_MPI"      # option for Sobol' simulation groups coupling

MELISSA_STATS = {}
MELISSA_STATS['mean'] = True
MELISSA_STATS['variance'] = True
MELISSA_STATS['min'] = False
MELISSA_STATS['max'] = False
MELISSA_STATS['threshold_exceedance'] = False
MELISSA_STATS['quantiles'] = False
MELISSA_STATS['sobol_indices'] = True

USER_FUNCTIONS = {}
USER_FUNCTIONS['create_study'] = create_study
USER_FUNCTIONS['draw_parameter_set'] = draw_param_set
USER_FUNCTIONS['create_group'] = create_simu
USER_FUNCTIONS['launch_server'] = launch_server
USER_FUNCTIONS['launch_group'] = launch_simu
USER_FUNCTIONS['check_server_job'] = check_job
USER_FUNCTIONS['check_group_job'] = check_job
USER_FUNCTIONS['cancel_job'] = kill_job
USER_FUNCTIONS['restart_server'] = restart_server
USER_FUNCTIONS['restart_group'] = launch_simu
USER_FUNCTIONS['check_scheduler_load'] = check_load
USER_FUNCTIONS['postprocessing'] = None
USER_FUNCTIONS['finalize'] = None
